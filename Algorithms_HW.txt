public class Test1 {
    public static int linearSearch(int[] arr1, int key) {
        for (int i = 0; i < arr1.length; i++) {  // traverse the array
            if (arr1[i] == key) { // match the key element with array element
                return i; // return index

            }
        }
        return -1; // not found element
    }

    public static int findElement(int arr[]) {
        int size = arr.length;

        if (size == 1) {
            System.out.println(arr[size - 1]);
            return arr[size - 1];
        } else if (arr.length % 2 == 0) {
            for (int i = 0; i < size; i += 2) {
                if (arr[i] != arr[i + 1]) {
                    System.out.println(arr[i]);
                    return arr[i];
                }
            }
        } else if (arr.length % 2 != 0) {
            for (int i = 0; i < size - 1; i += 2) {
                if (arr[i] != arr[i + 1]) {
                    System.out.println(arr[i]);
                    return arr[i];
                }
            }
        } else if (arr[size - 2] != arr[size - 1]) {
            System.out.println(arr[size - 1]);
            return arr[size - 1];
        }
        System.out.println("-1");
        return -1;

    }



    public static void main(String[] args) {
        int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 100};
        linearSearch(arr1, 3);
        // space complexity O(1)
        // time complexity O(n)

        int arr[] = {25, 25, 10, 10, 11, 11, 20, 20, 30, 30, 40, 40, 18, 18};

        findElement(arr);
        // space complexity O(1)
        // time complexity O(n)

    }
}

two algorithms in JS:


// 1
let arr = [182, 3, 45, 6, 32, 90, 15, 5, 23, 78, 0, 93, 88];

let reverse = [];
for (let i = 0; i < arr.length; i++) {
  reverse[arr.length - 1 - i] = arr[i];
}
console.log(reverse);
//space complexity O(1)
// time complexity O(n)


// 2
let arr1 = reverse;

let a = 0;
for (let i = 0; i < arr1.length / 2; i++) {
  a = arr1[arr1.length - 1 - i];
  arr1[arr1.length - i - 1] = arr1[i];
  arr1[i] = a;
}
console.log(arr1);

//space complexity O(1)
// time complexity O(n)